{"version":3,"sources":["utils/IntlDateTimeFormats.ts","config/globals.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["localeLongDateAndTime","Intl","DateTimeFormat","weekday","month","day","year","hour","minute","second","timeZoneName","localeWeekdayAndDate","now","Date","results","isOfficial","lastUpdatedDate","setMinutes","getMinutes","registeredVoterCount","ballotsReceived","ballotsCounted","contests","candidates","NoWrap","styled","span","NavigationBanner","div","Navigation","NavigationContent","Brand","SealImg","img","NavHeader","ElectionDate","NavTabs","NavTab","button","active","Container","PageHeader","Headline","h1","LastUpdated","p","ElectionTitle","h2","DataPoint","Actions","Button","Contests","Contest","ContestSection","ContestTitle","Row","Candidate","CandidateProgressBar","CandidateRow","CandidateDataColumn","CandidateMain","CandidateDetail","Refresh","ProgressBar","PrecinctsHeading","PrecinctsList","Precinct","PrecinctAddress","formatPercentage","a","b","Math","round","toFixed","sumCandidateVotes","Object","keys","reduce","sum","key","totalBallotsCounted","election","prev","curr","id","App","useState","refreshCountdown","setRefreshCountdown","console","log","useEffect","timer","setTimeout","t","clearTimeout","currentPage","setCurrentPage","style","transform","transition","undefined","src","sealURL","alt","county","name","state","onClick","Fragment","window","print","format","title","date","map","section","seats","contestCandidates","contestId","contestVotes","partyId","sort","candidateId","candidateVotes","width","data-percentage","as","parties","find","party","precincts","localeCompare","precinctId","address","ballotStyles","filter","bs","includes","href","dashify","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c3653c5b.chunk.js","sourcesContent":["import { DEFAULT_LOCALE } from '../config/globals'\n\nexport const localeLongDateAndTime = new Intl.DateTimeFormat(DEFAULT_LOCALE, {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  timeZoneName: 'short',\n})\n\nexport const localeWeekdayAndDate = new Intl.DateTimeFormat(DEFAULT_LOCALE, {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n})\n","export const DEFAULT_LOCALE = 'en-US'\n\nexport default {}\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport dashify from 'dashify'\nimport styled from 'styled-components'\n\nimport { ResultsCandidates, Results} from './config/types'\nimport {\n  localeLongDateAndTime,\n  localeWeekdayAndDate,\n} from './utils/IntlDateTimeFormats'\n\nimport election from './data/err-election.json'\n\n// TODO: Use external results when types are simpler.\n// import electionResults from './data/electionResults.json'\nconst now = new Date()\nconst results: Results = {\n  isOfficial: false,\n  lastUpdatedDate: new Date(now.setMinutes(now.getMinutes() - 30)),\n  registeredVoterCount: 2593,\n  ballotsReceived: 327,\n  ballotsCounted: 87,\n  contests: {\n    '775023387': {\n      candidates: {\n        '775033907': 248,\n        '775036124': 427,\n        '775036125': 120,\n        'writeIn': 7,\n      },\n    },\n    '775023385': {\n      candidates: {\n        '775033203': 447,\n        'writeIn': 22,\n      },\n    },\n    '775023386': {\n      candidates: {\n        '775033204': 322,\n        '775036126': 325,\n        'writeIn': 14,\n      },\n    },\n  },\n}\n\nconst NoWrap = styled.span`\n  white-space: nowrap;\n`\n\nconst NavigationBanner = styled.div`\n  background: #336733;\n`\nconst Navigation = styled.div`\n  display: flex;\n  align-items: stretch;\n`\nconst NavigationContent = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nconst Brand = styled.div`\n  position: relative;\n  width: 70px;\n  height: 70px;\n  margin: 0.5rem;\n  @media (min-width: 568px) {\n    width: 120px;\n    height: 90px;\n    padding: 1rem;\n    margin: 0.5rem 1rem;\n  }\n  @media print, (min-width: ${1200 + (2 * 16)}px) {\n    margin-left: 0;\n  }\n`\nconst SealImg = styled.img`\n  max-width: 100%;\n  border-radius: 100%;\n  box-shadow: 0 1px 4px #666666;\n  @media (min-width: 568px) {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`\nconst NavHeader = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  color: #ffffff;\n  line-height: 1.25;\n  @media print, (min-width: 568px) {\n    font-size: 1.5rem;\n  }\n`\n\nconst ElectionDate = styled.div`\n  font-size: 0.9rem;\n  @media print, (min-width: 568px) {\n    font-size: 1rem;\n  }\n`\nconst NavTabs = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  @media print {\n    display: none;\n  }\n`\nconst NavTab = styled.button<{ active?: boolean }>`\n  padding: 0.5rem 1rem;\n  margin-right: 0.5rem;\n  background: ${({ active }) => active ? '#eeeeee' : '#003334'};\n  border-radius: 0.3rem 0.3rem 0 0;\n  color: ${({ active }) => active ? '#000000' : '#ffffff'};\n  font-size: 1.15rem;\n  text-decoration: none;\n`\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n`\n\nconst PageHeader = styled.div`\n  padding: 0.5rem;\n  line-height: 1.25;\n  @media (min-width: 568px) {\n    padding: 1.25rem 1rem 1rem;\n  }\n  @media print, (min-width: ${1200 + (2 * 16)}px) {\n    padding-right: 0;\n    padding-left: 0;\n  }\n`\nconst Headline = styled.h1`\n  font-size: 2rem;\n`\nconst LastUpdated = styled.p`\n  font-size: 0.9rem;\n`\nconst ElectionTitle = styled.h2`\n  margin-top: 0.5rem;\n  font-size: 1.5rem;\n`\n\nconst DataPoint = styled.div`\n  margin-top: 0.5rem;\n`\n\nconst Actions = styled.div`\n  display: none;\n  float: right;\n  @media (min-width: 768px) {\n    display: block;\n  }\n`\n\nconst Button = styled.button`\n  display: inline-block;\n  padding: 0.5em 1em;\n  border: none;\n  background: #003334;\n  border-radius: 0.25em;\n  color: #ffffff;\n  cursor: pointer;\n  line-height: 1.25;\n  text-decoration: none;\n`\n\nconst Contests = styled.div`\n  display: grid;\n  margin-bottom: 1rem;\n  grid-column-gap: 16px;\n  grid-row-gap: 16px;\n  grid-template-columns: repeat(1, 1fr);\n  @media print {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media (min-width: 568px) {\n    margin-right: 1rem;\n    margin-left: 1rem;\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  @media (min-width: ${1200 + (2 * 16)}px) {\n    margin-right: 0;\n    margin-left: 0;\n  }\n`\n\nconst Contest = styled.div`\n  flex: 1;\n  padding: 1rem 1rem 0.75rem;\n  background: #ffffff;\n  box-shadow: 0 1px 4px #666666;\n  @media (min-width: 568px) {\n    border-radius: 0.3rem;\n  }\n  @media print {\n    border: 1px solid #000000;\n    box-shadow: none;\n  }\n`\nconst ContestSection = styled.div`\n  font-size: 0.9rem;\n`\nconst ContestTitle = styled.h2`\n  margin-top: 0.25rem;\n  font-size: 1.5rem;\n`\nconst Row = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n`\n\nconst Candidate = styled.div`\n  position: relative;\n  padding-top: 0.5rem;\n  border-top: 1px solid #999999;\n  margin-top: 1rem;\n  &:first-child {\n    margin-top: 0.5rem;\n  }\n`\n\nconst CandidateProgressBar = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  & > div {\n    height: 4px;\n    background: #ffc55d;\n  }\n`\n\nconst CandidateRow = styled(Row)`\n  align-items: flex-start;\n`\n\nconst CandidateDataColumn = styled.div`\n  line-height: 1.25;\n  &:last-child {\n    margin-left: 0.5rem;\n    text-align: right;\n  }\n`\nconst CandidateMain = styled.div`\n  font-size: 1rem;\n  font-weight: 700;\n`\nconst CandidateDetail = styled.div`\n  font-size: 0.9rem;\n  white-space: nowrap;\n`\n\nconst Refresh = styled.div`\n  padding: 0.5rem;\n  margin: 0 0 4rem;\n  font-size: 0.9rem;\n  text-align: center;\n  @media (min-width: 568px) {\n    padding: 1.25rem 1rem 1rem;\n  }\n  @media print, (min-width: ${1200 + (2 * 16)}px) {\n    padding-right: 0;\n    padding-left: 0;\n  }\n`\n\nconst ProgressBar = styled.div`\n  position: relative;\n  overflow: hidden;\n  height: 3px;\n  background: #336733;\n  & > div {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 100%;\n    height: 3px;\n    background: #ffc55d;\n    transition: transform 1s linear;\n  }\n`\nconst PrecinctsHeading = styled.h2`\n  margin: 1rem 0 0.5rem;\n`\nconst PrecinctsList = styled.div`\n  column-gap: 1rem;\n  @media (min-width: 568px) {\n    columns: 2;\n  }\n  @media (min-width: 768px) {\n    columns: 3;\n  }\n`\nconst Precinct = styled.div`\n  margin-bottom: 1.5rem;\n  break-inside: avoid;\n`\nconst PrecinctAddress = styled.div`\n  margin-bottom: 0.25rem;\n  font-size: 0.9rem;\n`\n\nconst formatPercentage = (a: number, b: number): string =>\n  `${(Math.round((a / b) * 10000) / 100).toFixed(2)}%`\nconst getPartyById = (id: string) =>\n  election.parties.find((party) => party.id === id)\nconst sumCandidateVotes = (candidates: ResultsCandidates): number =>\n  Object.keys(candidates).reduce((sum, key) => sum + candidates[key], 0)\nconst totalBallotsCounted = election.contests.reduce((prev, curr) =>\n  prev + sumCandidateVotes(results.contests[curr.id].candidates), 0)\n\nconst refreshInterval = 60\nconst App: React.FC = () => {\n  const [ refreshCountdown, setRefreshCountdown ] = useState(refreshInterval)\n  if (refreshCountdown === 0) {\n    console.log('Fetching new data!')\n  }\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setRefreshCountdown((t) => t === 0 ? refreshInterval : t - 1)\n    }, 1000);\n    return () => clearTimeout(timer)\n  })\n\n  const [ currentPage, setCurrentPage ] = useState('results')\n\n  return (\n    <div>\n      <ProgressBar>\n        <div style={{\n          transform: `translateX(${100 - (refreshCountdown / refreshInterval * 100)}%)`,\n          transition: refreshCountdown === refreshInterval ? 'none' : undefined,\n        }} />\n      </ProgressBar>\n      <NavigationBanner>\n        <Container>\n          <Navigation>\n            <Brand>\n              <SealImg\n                src={`/election-results-reporting${election.sealURL}`}\n                alt=\"seal\"\n              />\n            </Brand>\n            <NavigationContent>\n              <NavHeader>{election.county.name}, {election.state}</NavHeader>\n              <NavTabs>\n                <NavTab active={currentPage === 'results'} onClick={() => setCurrentPage('results')}>Results</NavTab>\n                <NavTab active={currentPage === 'info'} onClick={() => setCurrentPage('info')}>Voting Info</NavTab>\n              </NavTabs>\n            </NavigationContent>\n          </Navigation>\n        </Container>\n      </NavigationBanner>\n      {currentPage === 'results' && (\n        <React.Fragment>\n\n          <Container>\n            <PageHeader>\n              <Actions>\n                <Button onClick={() => {window.print()}}>Print Results</Button>\n              </Actions>\n              <Headline>\n                {results.isOfficial ? 'Offical Results':'Unoffical Results'}\n              </Headline>\n              <LastUpdated>\n                Results last updated at{' '}\n                {localeLongDateAndTime.format(results.lastUpdatedDate)}.{' '}\n                Official results will be finalized when the election is certified on DATE.\n              </LastUpdated>\n              <ElectionTitle>{election.title}</ElectionTitle>\n              <ElectionDate>\n                <NoWrap>Election Day is {localeWeekdayAndDate.format(new Date(election.date))}.</NoWrap>{' '}\n                <NoWrap>Vote from 7am – 7pm.</NoWrap>\n              </ElectionDate>\n              <DataPoint>\n                <NoWrap>{formatPercentage(totalBallotsCounted, results.registeredVoterCount)} voter turnout =</NoWrap>{' '}\n                <NoWrap>{results.registeredVoterCount} registered voters /</NoWrap>{' '}\n                <NoWrap>\n                  {\n                    results.isOfficial\n                      ? `${totalBallotsCounted} ballots counted`\n                      : `${totalBallotsCounted} ballots counted thus far`\n                  }\n                </NoWrap>\n              </DataPoint>\n            </PageHeader>\n          </Container>\n          <Container>\n            <Contests>\n              {election.contests.map(\n                ({ section, title, seats, candidates: contestCandidates, id: contestId }) => {\n                  const contestVotes = sumCandidateVotes(\n                    results.contests[contestId].candidates\n                  )\n                  const writeIn = {\n                    id: 'writeIn',\n                    name: 'Write-In',\n                    partyId: ''\n                  }\n                  const candidates = [\n                    ...contestCandidates,\n                    writeIn,\n                  ]\n                  return (\n                    <Contest key={contestId}>\n                      <Row>\n                        <div>\n                          <ContestSection>{section}</ContestSection>\n                          <ContestTitle>{title}</ContestTitle>\n                        </div>\n                        <CandidateDataColumn>\n                          <CandidateDetail>\n                            {seats} winner\n                          </CandidateDetail>\n                        </CandidateDataColumn>\n                      </Row>\n                      <div>\n                        {candidates\n                          .sort((a, b) =>\n                            results.contests[contestId].candidates[b.id]\n                            - results.contests[contestId].candidates[a.id]\n                          )\n                          .map(({ id: candidateId, name, partyId }) => {\n                          const candidateVotes =\n                            results.contests[contestId].candidates[candidateId]\n                          return (\n                            <Candidate key={candidateId}>\n                              <CandidateProgressBar>\n                                <div style={{ width: formatPercentage(candidateVotes, contestVotes) }} />\n                              </CandidateProgressBar>\n                              <CandidateRow data-percentage=\"50%\">\n                                <CandidateDataColumn>\n                                  <CandidateMain as=\"h3\">{name}</CandidateMain>\n                                  <CandidateDetail>{getPartyById(partyId)?.name}</CandidateDetail>\n                                </CandidateDataColumn>\n                                <CandidateDataColumn>\n                                  <CandidateMain>\n                                    {formatPercentage(candidateVotes, contestVotes)}\n                                  </CandidateMain>\n                                  <CandidateDetail>{candidateVotes} votes</CandidateDetail>\n                                </CandidateDataColumn>\n                              </CandidateRow>\n                            </Candidate>\n                          )\n                        })}\n                      </div>\n                    </Contest>\n                  )\n                }\n              )}\n            </Contests>\n          </Container>\n          <Container>\n            <Refresh>This data will automatically update every 1 minute.</Refresh>\n          </Container>\n        </React.Fragment>\n      )}\n      {currentPage === 'info' && (\n        <React.Fragment>\n          <Container>\n            <PageHeader>\n              <Headline>\n                Voting Info\n              </Headline>\n              <ElectionTitle>{election.title}</ElectionTitle>\n              <ElectionDate>\n                <NoWrap>Election Day is {localeWeekdayAndDate.format(new Date(election.date))}.</NoWrap>{' '}\n                <NoWrap>Vote from 7am – 7pm.</NoWrap>\n              </ElectionDate>\n              <PrecinctsHeading>Local Precincts</PrecinctsHeading>\n              <PrecinctsList>\n                {election.precincts.sort((a, b) => (a.name.localeCompare(b.name))).map(({ id: precinctId, name, address }) => (\n                  <Precinct>\n                    <h3>{name}</h3>\n                    <PrecinctAddress>{address || <em>no address provided</em>}</PrecinctAddress>\n                    <div>\n                      {\n                        election.ballotStyles\n                          .filter((bs) => bs.precincts.includes(precinctId))\n                          .map((bs) => (\n                            <Button as=\"a\" href={`election-dbebe1f6c8-precinct-${dashify(name)}-id-${precinctId}-style-${bs.id}-English-SAMPLE.pdf`}>Sample Ballot - Style {bs.id}</Button>\n                          ))\n                      }\n                    </div>\n                  </Precinct>\n                ))}\n              </PrecinctsList>\n            </PageHeader>\n          </Container>\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}