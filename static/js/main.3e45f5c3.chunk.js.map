{"version":3,"sources":["utils/IntlDateTimeFormats.ts","config/globals.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["localeLongDateAndTime","Intl","DateTimeFormat","weekday","month","day","year","hour","minute","second","timeZoneName","localeWeekdayAndDate","now","Date","certificationDate","setDate","getDate","NoWrap","styled","span","NavigationBanner","div","Navigation","NavigationContent","Brand","SealImg","img","NavHeader","ElectionDate","NavTabs","NavTab","button","active","Container","PageHeader","Headline","h1","LastUpdated","p","ElectionTitle","h2","DataPoint","Actions","Button","Contests","Contest","ContestSection","ContestTitle","Row","Candidate","CandidateProgressBar","CandidateRow","CandidateDataColumn","CandidateMain","CandidateDetail","Refresh","PrecinctsHeading","PrecinctsList","Precinct","PrecinctAddress","process","SampleBallots","formatPercentage","a","b","quotient","Math","round","toFixed","sumCandidateVotes","candidates","Object","keys","reduce","sum","key","App","useState","undefined","results","setResults","refreshCountdown","setRefreshCountdown","getTotalBallotsCounted","useCallback","election","contests","prev","curr","id","totalBallotsCounted","hasResults","currentPage","setCurrentPage","fetchResults","fetch","response","status","json","jsonResponse","length","console","log","statusText","useEffect","timer","setTimeout","t","clearTimeout","src","sealURL","alt","county","name","state","onClick","Fragment","window","print","isOfficial","format","lastUpdatedDate","title","date","registeredVoterCount","toLocaleString","map","section","seats","contestCandidates","contestId","contestVotes","partyId","sort","candidateId","candidateVotes","style","width","data-percentage","as","parties","find","party","precincts","localeCompare","precinctId","address","href","split","ballotStyles","filter","bs","includes","dashify","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3e45f5c3.chunk.js","sourcesContent":["import { DEFAULT_LOCALE } from '../config/globals'\n\nexport const localeLongDateAndTime = new Intl.DateTimeFormat(DEFAULT_LOCALE, {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  timeZoneName: 'short',\n})\n\nexport const localeWeekdayAndDate = new Intl.DateTimeFormat(DEFAULT_LOCALE, {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n})\n","export const DEFAULT_LOCALE = 'en-US'\n\nexport default {}\n","import React, { useCallback, useEffect, useState } from 'react'\nimport './App.css'\nimport dashify from 'dashify'\nimport styled from 'styled-components'\n\nimport { ResultsCandidates, Results} from './config/types'\nimport {\n  localeLongDateAndTime,\n  localeWeekdayAndDate,\n} from './utils/IntlDateTimeFormats'\n\nimport election from './data/err-election.json'\n\nconst now = new Date()\nconst certificationDate = new Date(now.setDate(now.getDate() + 14))\n\nconst NoWrap = styled.span`\n  white-space: nowrap;\n`\n\nconst NavigationBanner = styled.div`\n  background: #336733;\n`\nconst Navigation = styled.div`\n  display: flex;\n  align-items: stretch;\n`\nconst NavigationContent = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nconst Brand = styled.div`\n  position: relative;\n  width: 70px;\n  height: 70px;\n  margin: 0.5rem;\n  @media (min-width: 568px) {\n    width: 120px;\n    height: 90px;\n    padding: 1rem;\n    margin: 0.5rem 1rem;\n  }\n  @media print, (min-width: ${1200 + (2 * 16)}px) {\n    margin-left: 0;\n  }\n`\nconst SealImg = styled.img`\n  max-width: 100%;\n  border-radius: 100%;\n  box-shadow: 0 1px 4px #666666;\n  @media (min-width: 568px) {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`\nconst NavHeader = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  color: #ffffff;\n  line-height: 1.25;\n  @media print, (min-width: 568px) {\n    font-size: 1.5rem;\n  }\n  @media print {\n    color: #000000;\n  }\n`\n\nconst ElectionDate = styled.div`\n  font-size: 0.9rem;\n  @media print, (min-width: 568px) {\n    font-size: 1rem;\n  }\n`\nconst NavTabs = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  @media print {\n    display: none;\n  }\n`\nconst NavTab = styled.button<{ active?: boolean }>`\n  padding: 0.5rem 1rem;\n  margin-right: 0.5rem;\n  background: ${({ active }) => active ? '#eeeeee' : '#003334'};\n  border-radius: 0.3rem 0.3rem 0 0;\n  color: ${({ active }) => active ? '#000000' : '#ffffff'};\n  font-size: 1.15rem;\n  text-decoration: none;\n`\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n`\n\nconst PageHeader = styled.div`\n  padding: 0.5rem;\n  line-height: 1.25;\n  @media (min-width: 568px) {\n    padding: 1.25rem 1rem 1rem;\n  }\n  @media print, (min-width: ${1200 + (2 * 16)}px) {\n    padding-right: 0;\n    padding-left: 0;\n  }\n`\nconst Headline = styled.h1`\n  font-size: 2rem;\n`\nconst LastUpdated = styled.p`\n  font-size: 0.9rem;\n`\nconst ElectionTitle = styled.h2`\n  margin-top: 0.5rem;\n  font-size: 1.5rem;\n`\n\nconst DataPoint = styled.div`\n  margin-top: 0.5rem;\n`\n\nconst Actions = styled.div`\n  display: none;\n  float: right;\n  @media (min-width: 768px) {\n    display: block;\n  }\n`\n\nconst Button = styled.button`\n  display: inline-block;\n  padding: 0.5em 1em;\n  border: none;\n  background: #003334;\n  border-radius: 0.25em;\n  color: #ffffff;\n  cursor: pointer;\n  line-height: 1.25;\n  text-decoration: none;\n`\n\nconst Contests = styled.div`\n  display: grid;\n  margin-bottom: 1rem;\n  grid-column-gap: 16px;\n  grid-row-gap: 16px;\n  grid-template-columns: repeat(1, 1fr);\n  @media print {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media (min-width: 568px) {\n    margin-right: 1rem;\n    margin-left: 1rem;\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  @media (min-width: ${1200 + (2 * 16)}px) {\n    margin-right: 0;\n    margin-left: 0;\n  }\n`\n\nconst Contest = styled.div`\n  flex: 1;\n  padding: 1rem 1rem 0.75rem;\n  background: #ffffff;\n  box-shadow: 0 1px 4px #666666;\n  @media (min-width: 568px) {\n    border-radius: 0.3rem;\n  }\n  @media print {\n    border: 1px solid #000000;\n    box-shadow: none;\n  }\n`\nconst ContestSection = styled.div`\n  font-size: 0.9rem;\n`\nconst ContestTitle = styled.h2`\n  margin-top: 0.25rem;\n  font-size: 1.5rem;\n`\nconst Row = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n`\n\nconst Candidate = styled.div`\n  position: relative;\n  padding-top: 0.5rem;\n  border-top: 1px solid #999999;\n  margin-top: 1rem;\n  &:first-child {\n    margin-top: 0.5rem;\n  }\n`\n\nconst CandidateProgressBar = styled.div`\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  & > div {\n    height: 4px;\n    background: #ffc55d;\n    @media print {\n      background: #000000;\n    }\n  }\n`\n\nconst CandidateRow = styled(Row)`\n  align-items: flex-start;\n`\n\nconst CandidateDataColumn = styled.div`\n  line-height: 1.25;\n  &:last-child {\n    margin-left: 0.5rem;\n    text-align: right;\n  }\n`\nconst CandidateMain = styled.div`\n  font-size: 1rem;\n  font-weight: 700;\n`\nconst CandidateDetail = styled.div`\n  font-size: 0.9rem;\n  white-space: nowrap;\n`\n\nconst Refresh = styled.div`\n  padding: 0.5rem;\n  margin: 0 0 4rem;\n  font-size: 0.9rem;\n  text-align: center;\n  @media (min-width: 568px) {\n    padding: 1.25rem 1rem 1rem;\n  }\n  @media (min-width: ${1200 + (2 * 16)}px) {\n    padding-right: 0;\n    padding-left: 0;\n  }\n  @media print {\n    display: none;\n  }\n`\n\nconst PrecinctsHeading = styled.h2`\n  margin: 1rem 0 0.5rem;\n`\nconst PrecinctsList = styled.div`\n  column-gap: 1rem;\n  @media (min-width: 568px) {\n    columns: 2;\n  }\n  @media (min-width: 768px) {\n    columns: 3;\n  }\n`\nconst Precinct = styled.div`\n  margin-bottom: 3rem;\n  break-inside: avoid;\n`\nconst PrecinctAddress = styled.div`\n  margin-bottom: 0.25rem;\n  &::before {\n    display: inline-block;\n    width: 1rem;\n    height: 1rem;\n    margin-right: 0.25rem;\n    background: bottom center url('${process.env.PUBLIC_URL}/icons/map-marker-regular.svg') no-repeat;\n    content: '';\n    vertical-align: text-bottom;\n  }\n`\nconst SampleBallots = styled.div`\n  &::before {\n    display: inline-block;\n    width: 1rem;\n    height: 1rem;\n    margin-right: 0.25rem;\n    background: bottom center url('${process.env.PUBLIC_URL}/icons/ballot-check-regular.svg') no-repeat;\n    content: '';\n    vertical-align: text-bottom;\n  }\n`\n\nconst formatPercentage = (a: number, b: number): string =>\n  {\n    if (a === 0) {\n      return '0%'\n    }\n    if (a === b) {\n      return '100%'\n    }\n    const quotient = b === 0 ? 0 : a / b\n    return `${(Math.round(quotient * 10000) / 100).toFixed(2)}%`\n  }\nconst getPartyById = (id: string) =>\n  election.parties.find((party) => party.id === id)\nconst sumCandidateVotes = (candidates: ResultsCandidates): number =>\n  Object.keys(candidates).reduce((sum, key) => sum + candidates[key], 0)\n\n// pre-election || during-election || post-election\nconst refreshInterval = 60\nconst App: React.FC = () => {\n  // const [ electionState, setElectionState ] = useState('pre-election')\n  const [ results, setResults ] = useState<Results | undefined>(undefined)\n  const [ refreshCountdown, setRefreshCountdown ] = useState(0)\n\n  const getTotalBallotsCounted = useCallback<() => number>(() => results\n    ? election.contests.reduce((prev, curr) =>\n      prev + sumCandidateVotes(results.contests[curr.id].candidates), 0)\n    : 0, [results])\n\n  const totalBallotsCounted = getTotalBallotsCounted()\n  const hasResults = totalBallotsCounted > 0\n  const [ currentPage, setCurrentPage ] = useState(hasResults ? 'results' : 'info')\n\n  const fetchResults = async () => {\n    const response = await fetch(\"https://err-backend-worker.votingworks.workers.dev/warren\")\n    if (response.status >= 200 && response.status <= 299) {\n      const jsonResponse: Results = await response.json()\n      if (Object.keys(jsonResponse).length !== 0) {\n        setResults(jsonResponse)\n      }\n    } else {\n      console.log(response.status, response.statusText);\n    }\n  }\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setRefreshCountdown((t) => t === 0 ? refreshInterval : t - 1)\n      // setElectionState('pre-election') // TODO\n      if (refreshCountdown === 0) {\n        fetchResults()\n      }\n    }, 1000);\n    return () => clearTimeout(timer)\n  })\n\n  useEffect(() => {\n    if (getTotalBallotsCounted() > 0) {\n      setCurrentPage('results')\n    }\n  }, [results, getTotalBallotsCounted])\n\n  return (\n    <div>\n      <NavigationBanner>\n        <Container>\n          <Navigation>\n            <Brand>\n              <SealImg\n                src={`/election-results-reporting${election.sealURL}`}\n                alt=\"seal\"\n              />\n            </Brand>\n            <NavigationContent>\n              <NavHeader>{election.county.name}, {election.state}</NavHeader>\n              <NavTabs>\n                <NavTab active={currentPage === 'results'} onClick={() => setCurrentPage('results')}>Results</NavTab>\n                <NavTab active={currentPage === 'info'} onClick={() => setCurrentPage('info')}>Voting Info</NavTab>\n              </NavTabs>\n            </NavigationContent>\n          </Navigation>\n        </Container>\n      </NavigationBanner>\n      {currentPage === 'results' && !results && (\n        <Container>\n          <Refresh>Loading results…</Refresh>\n        </Container>\n      )}\n      {currentPage === 'results' && results && (\n        <React.Fragment>\n          <Container>\n            <PageHeader>\n              {hasResults && (\n                <Actions>\n                  <Button onClick={window.print}>Print Results</Button>\n                </Actions>\n              )}\n              <Headline>\n                {results?.isOfficial ? 'Offical Results':'Unoffical Results'}\n              </Headline>\n              <LastUpdated>\n                Results last updated at{' '}\n                <NoWrap>{localeLongDateAndTime.format(new Date(results.lastUpdatedDate))}</NoWrap>.{' '}\n                Official results will be finalized when the election is certified on{' '}\n                <NoWrap>{localeLongDateAndTime.format(new Date(certificationDate))}</NoWrap>.\n              </LastUpdated>\n              <ElectionTitle>{election.title}</ElectionTitle>\n              <ElectionDate>\n                <NoWrap>{localeWeekdayAndDate.format(new Date(election.date))}</NoWrap>\n              </ElectionDate>\n              {hasResults ? (\n                <DataPoint>\n                  <NoWrap>{formatPercentage(totalBallotsCounted, results.registeredVoterCount)} voter turnout =</NoWrap>{' '}\n                  <NoWrap>{results.registeredVoterCount.toLocaleString()} registered voters /</NoWrap>{' '}\n                  <NoWrap>\n                    {\n                      results.isOfficial\n                        ? `${totalBallotsCounted.toLocaleString()} ballots counted`\n                        : `${totalBallotsCounted.toLocaleString()} ballots counted thus far`\n                    }\n                  </NoWrap>\n                </DataPoint>\n              ) : (\n                <DataPoint>\n                  <NoWrap>{results.registeredVoterCount.toLocaleString()} registered voters</NoWrap>\n                </DataPoint>\n              )}\n            </PageHeader>\n          </Container>\n          <Container>\n            <Contests>\n              {election.contests.map(\n                ({ section, title, seats, candidates: contestCandidates, id: contestId }) => {\n                  const contestVotes = sumCandidateVotes(\n                    results.contests[contestId].candidates\n                  )\n                  const writeIn = {\n                    id: 'writeIn',\n                    name: 'Write-In',\n                    partyId: ''\n                  }\n                  const candidates = [\n                    ...contestCandidates,\n                    writeIn,\n                  ]\n                  return (\n                    <Contest key={contestId}>\n                      <Row>\n                        <div>\n                          <ContestSection>{section}</ContestSection>\n                          <ContestTitle>{title}</ContestTitle>\n                        </div>\n                        <CandidateDataColumn>\n                          <CandidateDetail>\n                            {seats} winner\n                          </CandidateDetail>\n                        </CandidateDataColumn>\n                      </Row>\n                      <div>\n                        {candidates\n                          .sort((a, b) =>\n                            results.contests[contestId].candidates[b.id]\n                            - results.contests[contestId].candidates[a.id]\n                          )\n                          .map(({ id: candidateId, name, partyId }) => {\n                          const candidateVotes =\n                            results.contests[contestId].candidates[candidateId]\n                          return (\n                            <Candidate key={candidateId}>\n                              <CandidateProgressBar>\n                                <div style={{ width: formatPercentage(candidateVotes, contestVotes) }} />\n                              </CandidateProgressBar>\n                              <CandidateRow data-percentage=\"50%\">\n                                <CandidateDataColumn>\n                                  <CandidateMain as=\"h3\">{name}</CandidateMain>\n                                  <CandidateDetail>{getPartyById(partyId)?.name}</CandidateDetail>\n                                </CandidateDataColumn>\n                                <CandidateDataColumn>\n                                  <CandidateMain>\n                                    {formatPercentage(candidateVotes, contestVotes)}\n                                  </CandidateMain>\n                                  <CandidateDetail>{candidateVotes} votes</CandidateDetail>\n                                </CandidateDataColumn>\n                              </CandidateRow>\n                            </Candidate>\n                          )\n                        })}\n                      </div>\n                    </Contest>\n                  )\n                }\n              )}\n            </Contests>\n          </Container>\n          <Container>\n            <Refresh>This data will automatically update every 1 minute.</Refresh>\n          </Container>\n        </React.Fragment>\n      )}\n      {currentPage === 'info' && (\n        <React.Fragment>\n          <Container>\n            <PageHeader>\n              <Headline>\n                Voting Info\n              </Headline>\n              <ElectionTitle>{election.title}</ElectionTitle>\n              <ElectionDate>\n                <NoWrap>Election Day is {localeWeekdayAndDate.format(new Date(election.date))}.</NoWrap>{' '}\n                <NoWrap>Polls are open 7am – 7pm.</NoWrap>\n              </ElectionDate>\n              <PrecinctsHeading>Local Precincts</PrecinctsHeading>\n              <PrecinctsList>\n                {election.precincts.sort((a, b) => (a.name.localeCompare(b.name))).map(({ id: precinctId, name, address }) => (\n                  <Precinct key={precinctId}>\n                    <h3>{name}</h3>\n                    <PrecinctAddress>\n                      {address ? (\n                        <a href={`https://maps.google.com/?q=${address}`}>\n                          {address.split(',')[0]}\n                        </a>\n                      ) : (\n                        <em>no address provided</em>\n                      )}\n                    </PrecinctAddress>\n                    <SampleBallots>\n                      {\n                        election.ballotStyles\n                          .filter((bs) => bs.precincts.includes(precinctId))\n                          .map((bs) => (\n                            <a key={`${precinctId}-${bs.id}`} href={`${process.env.PUBLIC_URL}/sample-ballots/election-dbebe1f6c8-precinct-${dashify(name)}-id-${precinctId}-style-${bs.id}-English-SAMPLE.pdf`}>sample ballot</a>\n                          ))\n                      }\n                    </SampleBallots>\n                  </Precinct>\n                ))}\n              </PrecinctsList>\n            </PageHeader>\n          </Container>\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}