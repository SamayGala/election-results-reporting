{"version":3,"sources":["utils/IntlDateTimeFormats.ts","config/globals.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["localeLongDateAndTime","Intl","DateTimeFormat","weekday","month","day","year","hour","minute","second","timeZoneName","localeWeekdayAndDate","results","registeredVoterCount","ballotsReceived","ballotsCounted","contests","candidates","SealImg","styled","img","Contest","div","now","Date","formatPercentage","a","b","Math","round","toFixed","App","className","src","election","sealURL","alt","format","setMinutes","getMinutes","title","date","map","section","seats","contestId","id","contestVotes","Object","keys","reduce","sum","key","sumCandidateVotes","candidateId","name","partyId","candidateVotes","parties","find","party","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"suHAEaA,EAAwB,IAAIC,KAAKC,eCFhB,QDE+C,CAC3EC,QAAS,OACTC,MAAO,OACPC,IAAK,UACLC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,OAAQ,UACRC,aAAc,UAGHC,EAAuB,IAAIV,KAAKC,eCbf,QDa8C,CAC1EC,QAAS,OACTC,MAAO,OACPC,IAAK,UACLC,KAAM,YEWFM,EAAmB,CACvBC,qBAAsB,KACtBC,gBAAiB,IACjBC,eAAgB,GAChBC,SAAU,CACR,UAAa,CACXC,WAAY,CACV,UAAa,GACb,UAAa,GACb,UAAa,KAGjB,UAAa,CACXA,WAAY,CACV,UAAa,KAGjB,UAAa,CACXA,WAAY,CACV,UAAa,GACb,UAAa,OAMfC,EAAUC,IAAOC,IAAV,iDAIPC,EAAUF,IAAOG,IAAV,iHAOPC,EAAM,IAAIC,KACVC,EAAmB,SAACC,EAAWC,GAAZ,iBACnBC,KAAKC,MAAOH,EAAIC,EAAK,KAAS,KAAKG,QAAQ,GADxB,MAsFVC,EAhFO,kBACpB,yBAAKC,UAAU,OACb,6BACE,kBAACd,EAAD,CACEe,IAAG,qCAAgCC,EAASC,SAC5CC,IAAI,SAEN,kDACA,6CACgB,IACbpC,EAAsBqC,OAAOd,EAAIe,WAAWf,EAAIgB,aAAe,OAGpE,6BACE,iDACA,4BAAKL,EAASM,OACd,2BAAI7B,EAAqB0B,OAAO,IAAIb,KAAKU,EAASO,QAClD,6BACE,4BACGhB,EACCb,EAAQE,gBACRF,EAAQC,sBACP,IAJL,iBAOA,+BACGD,EAAQE,gBADX,sBAC+C,IAC5CF,EAAQC,qBAFX,uBAKF,6BACE,4BACGY,EAAiBb,EAAQG,eAAgBH,EAAQE,iBAAkB,IADtE,mBAIA,+BACGF,EAAQG,eADX,sBAC8CH,EAAQE,gBAAiB,IADvE,sBAMJ,6BACGoB,EAASlB,SAAS0B,KACjB,YAA2D,IAAxDC,EAAuD,EAAvDA,QAASH,EAA8C,EAA9CA,MAAOI,EAAuC,EAAvCA,MAAO3B,EAAgC,EAAhCA,WAAgB4B,EAAgB,EAApBC,GAC9BC,EA9CU,SAAC9B,GAAD,OACxB+B,OAAOC,KAAKhC,GAAYiC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMlC,EAAWmC,KAAM,GA6CvCC,CACnBzC,EAAQI,SAAS6B,GAAW5B,YAE9B,OACE,kBAACI,EAAD,KACE,6BAAMsB,GACN,wBAAIX,UAAU,iBAAiBQ,GAC/B,6BAAMI,EAAN,SACA,6BACG3B,EAAWyB,KAAI,YAAyC,IAAD,EAzDlDI,EAyDiBQ,EAAiC,EAArCR,GAAiBS,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAClCC,EACJ7C,EAAQI,SAAS6B,GAAW5B,WAAWqC,GACzC,OACE,6BACE,6BACE,4BAAKC,EAAL,KACA,uCAhEFT,EAgEuBU,EAArB,EA/DtBtB,EAASwB,QAAQC,MAAK,SAACC,GAAD,OAAWA,EAAMd,KAAOA,YA+DxB,aAAQ,EAAuBS,OAEjC,6BACE,6BACG9B,EAAiBgC,EAAgBV,IAEpC,6BAAMU,EAAN,uBC5HJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6826d57.chunk.js","sourcesContent":["import { DEFAULT_LOCALE } from '../config/globals'\n\nexport const localeLongDateAndTime = new Intl.DateTimeFormat(DEFAULT_LOCALE, {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  timeZoneName: 'short',\n})\n\nexport const localeWeekdayAndDate = new Intl.DateTimeFormat(DEFAULT_LOCALE, {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n})\n","export const DEFAULT_LOCALE = 'en-US'\n\nexport default {}\n","import React from 'react'\nimport './App.css'\nimport styled from 'styled-components'\n\nimport election from './data/election.json'\nimport {\n  localeLongDateAndTime,\n  localeWeekdayAndDate,\n} from './utils/IntlDateTimeFormats'\n// import electionResults from './data/electionResults.json'\n\nexport interface Dictionary<T> {\n  [key: string]: T\n}\n\ntype ResultsCandidates = Dictionary<number>\n\ninterface ResultsContest {\n  candidates: ResultsCandidates\n}\n\ninterface Results {\n  registeredVoterCount: number\n  ballotsReceived: number\n  ballotsCounted: number\n  contests: Dictionary<ResultsContest>\n}\n\nconst results: Results = {\n  registeredVoterCount: 2593,\n  ballotsReceived: 327,\n  ballotsCounted: 87,\n  contests: {\n    '775023387': {\n      candidates: {\n        '775033907': 28,\n        '775036124': 47,\n        '775036125': 12,\n      },\n    },\n    '775023385': {\n      candidates: {\n        '775033203': 87,\n      },\n    },\n    '775023386': {\n      candidates: {\n        '775033204': 62,\n        '775036126': 25,\n      },\n    },\n  },\n}\n\nconst SealImg = styled.img`\n  max-width: 100px;\n`\n\nconst Contest = styled.div`\n  padding: 1rem;\n  border: 1px solid;\n  margin: 1rem 1rem 1rem 0;\n  float: left;\n`\n\nconst now = new Date()\nconst formatPercentage = (a: number, b: number): string =>\n  `${(Math.round((a / b) * 10000) / 100).toFixed(2)}%`\nconst getPartyById = (id: string) =>\n  election.parties.find((party) => party.id === id)\nconst sumCandidateVotes = (candidates: ResultsCandidates): number =>\n  Object.keys(candidates).reduce((sum, key) => sum + candidates[key], 0)\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <nav>\n      <SealImg\n        src={`/election-results-reporting${election.sealURL}`}\n        alt=\"seal\"\n      />\n      <h1>Election Reporting</h1>\n      <div>\n        Last updated:{' '}\n        {localeLongDateAndTime.format(now.setMinutes(now.getMinutes() - 30))}\n      </div>\n    </nav>\n    <div>\n      <h1>Unoffical Results</h1>\n      <h2>{election.title}</h2>\n      <p>{localeWeekdayAndDate.format(new Date(election.date))}</p>\n      <div>\n        <h2>\n          {formatPercentage(\n            results.ballotsReceived,\n            results.registeredVoterCount\n          )}{' '}\n          Voter Turnout\n        </h2>\n        <small>\n          {results.ballotsReceived} ballots received /{' '}\n          {results.registeredVoterCount} registered voters\n        </small>\n      </div>\n      <div>\n        <h2>\n          {formatPercentage(results.ballotsCounted, results.ballotsReceived)}{' '}\n          Ballots Counted\n        </h2>\n        <small>\n          {results.ballotsCounted} ballots counted / {results.ballotsReceived}{' '}\n          ballots received\n        </small>\n      </div>\n    </div>\n    <div>\n      {election.contests.map(\n        ({ section, title, seats, candidates, id: contestId }) => {\n          const contestVotes = sumCandidateVotes(\n            results.contests[contestId].candidates\n          )\n          return (\n            <Contest>\n              <div>{section}</div>\n              <h2 className=\"contest-title\">{title}</h2>\n              <div>{seats} seat</div>\n              <div>\n                {candidates.map(({ id: candidateId, name, partyId }) => {\n                  const candidateVotes =\n                    results.contests[contestId].candidates[candidateId]\n                  return (\n                    <div>\n                      <div>\n                        <h3>{name} </h3>\n                        <small>{getPartyById(partyId)?.name}</small>\n                      </div>\n                      <div>\n                        <div>\n                          {formatPercentage(candidateVotes, contestVotes)}\n                        </div>\n                        <div>{candidateVotes} votes</div>\n                      </div>\n                    </div>\n                  )\n                })}\n              </div>\n            </Contest>\n          )\n        }\n      )}\n    </div>\n  </div>\n)\n\nexport default App\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}