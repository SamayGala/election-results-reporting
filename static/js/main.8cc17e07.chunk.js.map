{"version":3,"sources":["utils/IntlDateTimeFormats.ts","config/globals.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["localeLongDateAndTime","Intl","DateTimeFormat","weekday","month","day","year","hour","minute","second","timeZoneName","localeWeekdayAndDate","now","Date","results","isOfficial","lastUpdatedDate","setMinutes","getMinutes","registeredVoterCount","ballotsReceived","ballotsCounted","contests","candidates","NoWrap","styled","span","NavigationBanner","div","Navigation","NavigationContent","Brand","SealImg","img","NavHeader","NavTitle","ElectionDate","NavTabs","NavTab","a","active","Container","PageHeader","Headline","h1","LastUpdated","p","ElectionTitle","h2","DataPoint","Actions","PrintButton","button","Contests","Contest","ContestSection","ContestTitle","Row","Candidate","CandidateDataColumn","CandidateMain","CandidateDetail","Refresh","formatPercentage","b","Math","round","toFixed","sumCandidateVotes","Object","keys","reduce","sum","key","totalBallotsCounted","election","prev","curr","id","App","src","sealURL","alt","county","name","state","href","onClick","window","print","format","title","date","map","section","seats","contestCandidates","contestId","contestVotes","partyId","candidateId","candidateVotes","as","parties","find","party","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8cc17e07.chunk.js","sourcesContent":["import { DEFAULT_LOCALE } from '../config/globals'\n\nexport const localeLongDateAndTime = new Intl.DateTimeFormat(DEFAULT_LOCALE, {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: 'numeric',\n  minute: 'numeric',\n  second: 'numeric',\n  timeZoneName: 'short',\n})\n\nexport const localeWeekdayAndDate = new Intl.DateTimeFormat(DEFAULT_LOCALE, {\n  weekday: 'long',\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n})\n","export const DEFAULT_LOCALE = 'en-US'\n\nexport default {}\n","import React from 'react'\nimport './App.css'\nimport styled from 'styled-components'\n\nimport { ResultsCandidates, Results} from './config/types'\nimport {\n  localeLongDateAndTime,\n  localeWeekdayAndDate,\n} from './utils/IntlDateTimeFormats'\n\nimport election from './data/election.json'\n\n// TODO: Use external results when types are simpler.\n// import electionResults from './data/electionResults.json'\nconst now = new Date()\nconst results: Results = {\n  isOfficial: false,\n  lastUpdatedDate: new Date(now.setMinutes(now.getMinutes() - 30)),\n  registeredVoterCount: 2593,\n  ballotsReceived: 327,\n  ballotsCounted: 87,\n  contests: {\n    '775023387': {\n      candidates: {\n        '775033907': 28,\n        '775036124': 47,\n        '775036125': 12,\n        'writeIn': 0,\n      },\n    },\n    '775023385': {\n      candidates: {\n        '775033203': 87,\n        'writeIn': 0,\n      },\n    },\n    '775023386': {\n      candidates: {\n        '775033204': 62,\n        '775036126': 25,\n        'writeIn': 0,\n      },\n    },\n  },\n}\n\nconst NoWrap = styled.span`\n  white-space: nowrap;\n`\n\nconst NavigationBanner = styled.div`\n  background: #336733;\n`\nconst Navigation = styled.div`\n  display: flex;\n  align-items: stretch;\n`\nconst NavigationContent = styled.div`\n  display: flex;\n  flex-direction: column;\n`\nconst Brand = styled.div`\n  position: relative;\n  width: 70px;\n  height: 70px;\n  margin: 0.5rem;\n  @media (min-width: 568px) {\n    width: 120px;\n    height: 90px;\n    padding: 1rem;\n    margin: 0.5rem 1rem;\n  }\n  @media print, (min-width: ${1200 + (2 * 16)}px) {\n    margin-left: 0;\n  }\n`\nconst SealImg = styled.img`\n  max-width: 100%;\n  border-radius: 100%;\n  box-shadow: 0 1px 4px #666666;\n  @media (min-width: 568px) {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n`\nconst NavHeader = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  color: #ffffff;\n  line-height: 1.25;\n`\nconst NavTitle = styled.div`\n  @media print, (min-width: 568px) {\n    font-size: 1.5rem;\n  }\n`\nconst ElectionDate = styled.div`\n  font-size: 0.9rem;\n  @media print, (min-width: 568px) {\n    font-size: 1rem;\n  }\n`\nconst NavTabs = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n  @media print {\n    display: none;\n  }\n`\nconst NavTab = styled.a<{ active?: boolean }>`\n  padding: 0.5rem 1rem 0.25rem;\n  margin-right: 0.5rem;\n  background: ${({ active }) => active ? '#eeeeee' : '#003334'};\n  border-radius: 0.3rem 0.3rem 0 0;\n  color: ${({ active }) => active ? '#000000' : '#ffffff'};\n  font-size: 1.25rem;\n  text-decoration: none;\n`\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n`\n\nconst PageHeader = styled.div`\n  padding: 0.5rem;\n  line-height: 1.25;\n  @media (min-width: 568px) {\n    padding: 1.25rem 1rem 1rem;\n  }\n  @media print, (min-width: ${1200 + (2 * 16)}px) {\n    padding-right: 0;\n    padding-left: 0;\n  }\n`\nconst Headline = styled.h1`\n  font-size: 2rem;\n`\nconst LastUpdated = styled.p`\n  font-size: 0.9rem;\n`\nconst ElectionTitle = styled.h2`\n  margin-top: 0.5rem;\n  font-size: 1.5rem;\n`\n\nconst DataPoint = styled.div`\n  margin-top: 0.5rem;\n\n  /* div:first-child {\n    font-size: 1.25rem;\n    font-weight: 700;\n  }\n  div:last-child {\n    font-size: 0.9rem;\n  } */\n`\n\nconst Actions = styled.div`\n  display: none;\n  float: right;\n  @media (min-width: 768px) {\n    display: block;\n  }\n`\n\nconst PrintButton = styled.button`\n  display: inline-block;\n  padding: 0.5em 1em;\n  border: none;\n  background: #003334;\n  border-radius: 0.25em;\n  box-shadow: 0 0 0 0 rgba(71, 167, 75, 1);\n  color: #ffffff;\n  cursor: pointer;\n  line-height: 1.25;\n`\n\nconst Contests = styled.div`\n  display: grid;\n  margin-bottom: 1rem;\n  grid-column-gap: 16px;\n  grid-row-gap: 16px;\n  grid-template-columns: repeat(1, 1fr);\n  @media print {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media (min-width: 568px) {\n    margin-right: 1rem;\n    margin-left: 1rem;\n    grid-template-columns: repeat(2, 1fr);\n  }\n  @media (min-width: 768px) {\n    grid-template-columns: repeat(3, 1fr);\n  }\n  @media (min-width: ${1200 + (2 * 16)}px) {\n    margin-right: 0;\n    margin-left: 0;\n  }\n`\n\nconst Contest = styled.div`\n  flex: 1;\n  padding: 1rem;\n  background: #ffffff;\n  box-shadow: 0 1px 4px #666666;\n  @media (min-width: 568px) {\n    border-radius: 0.3rem;\n  }\n  @media print {\n    border: 1px solid #000000;\n    box-shadow: none;\n  }\n`\nconst ContestSection = styled.div`\n  font-size: 0.9rem;\n`\nconst ContestTitle = styled.h2`\n  margin-top: 0.25rem;\n  font-size: 1.5rem;\n`\nconst Row = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: space-between;\n`\n\nconst Candidate = styled(Row)`\n  align-items: flex-start;\n  padding-top: 0.75rem;\n  border-top: 1px solid #999999;\n  margin-top: 0.75rem;\n  &:first-child {\n    margin-top: 0.25rem;\n  }\n`\n\nconst CandidateDataColumn = styled.div`\n  line-height: 1.25;\n  &:last-child {\n    margin-left: 0.5rem;\n    text-align: right;\n  }\n`\nconst CandidateMain = styled.div`\n  font-size: 1rem;\n  font-weight: 700;\n`\nconst CandidateDetail = styled.div`\n  font-size: 0.9rem;\n  white-space: nowrap;\n`\n\nconst Refresh = styled.div`\n  padding: 0.5rem;\n  margin: 0 0 4rem;\n  line-height: 1.25;\n  @media (min-width: 568px) {\n    padding: 1.25rem 1rem 1rem;\n  }\n  @media print, (min-width: ${1200 + (2 * 16)}px) {\n    padding-right: 0;\n    padding-left: 0;\n  }\n`\n\nconst formatPercentage = (a: number, b: number): string =>\n  `${(Math.round((a / b) * 10000) / 100).toFixed(2)}%`\nconst getPartyById = (id: string) =>\n  election.parties.find((party) => party.id === id)\nconst sumCandidateVotes = (candidates: ResultsCandidates): number =>\n  Object.keys(candidates).reduce((sum, key) => sum + candidates[key], 0)\nconst totalBallotsCounted = election.contests.reduce((prev, curr) =>\n  prev + sumCandidateVotes(results.contests[curr.id].candidates), 0)\n\nconst App: React.FC = () => (\n  <div>\n    <NavigationBanner>\n      <Container>\n        <Navigation>\n          <Brand>\n            <SealImg\n              src={`/election-results-reporting${election.sealURL}`}\n              alt=\"seal\"\n            />\n          </Brand>\n          <NavigationContent>\n            <NavHeader>\n              <div>\n                <NavTitle>{election.county.name}, {election.state}</NavTitle>\n                {/* <ElectionDate>{localeWeekdayAndDate.format(new Date(election.date))}</ElectionDate> */}\n              </div>\n            </NavHeader>\n            <NavTabs>\n              <NavTab active href=\"#active\">Results</NavTab>\n              <NavTab href=\"#precincts\">Precincts</NavTab>\n            </NavTabs>\n          </NavigationContent>\n        </Navigation>\n      </Container>\n    </NavigationBanner>\n    <Container>\n      <PageHeader>\n        <Actions>\n          <PrintButton onClick={() => {window.print()}}>Print Results</PrintButton>\n        </Actions>\n        <Headline>\n          {results.isOfficial ? 'Offical Results':'Unoffical Results'}\n        </Headline>\n        <LastUpdated>\n          Last updated at{' '}\n          {localeLongDateAndTime.format(results.lastUpdatedDate)}.{' '}\n          Official results will be finalized when the election is certified on DATE.\n        </LastUpdated>\n        <div>\n        </div>\n        <ElectionTitle>{election.title}</ElectionTitle>\n        <ElectionDate>\n          <NoWrap>Election Day is {localeWeekdayAndDate.format(new Date(election.date))}.</NoWrap>{' '}\n          <NoWrap>Vote from 7am – 7pm.</NoWrap>\n        </ElectionDate>\n        <DataPoint>\n          <div>\n            <NoWrap>{formatPercentage(totalBallotsCounted, results.registeredVoterCount)} Voter Turnout =</NoWrap>{' '}\n            <NoWrap>{results.registeredVoterCount} registered voters /</NoWrap>{' '}\n            <NoWrap>\n              {\n                results.isOfficial\n                  ? `${totalBallotsCounted} ballots counted`\n                  : `${totalBallotsCounted} ballots counted thus far`\n              }\n            </NoWrap>\n          </div>\n        </DataPoint>\n      </PageHeader>\n    </Container>\n    <Container>\n      <Contests>\n        {election.contests.map(\n          ({ section, title, seats, candidates: contestCandidates, id: contestId }) => {\n            const contestVotes = sumCandidateVotes(\n              results.contests[contestId].candidates\n            )\n            const writeIn = {\n              id: 'writeIn',\n              name: 'Write-In',\n              partyId: ''\n            }\n            const candidates = [\n              ...contestCandidates,\n              writeIn,\n            ]\n            return (\n              <Contest>\n                <Row>\n                  <div>\n                    <ContestSection>{section}</ContestSection>\n                    <ContestTitle>{title}</ContestTitle>\n                  </div>\n                  <CandidateDataColumn>\n                    <CandidateDetail>\n                      {seats} winner\n                    </CandidateDetail>\n                  </CandidateDataColumn>\n                </Row>\n                <div>\n                  {candidates.map(({ id: candidateId, name, partyId }) => {\n                    const candidateVotes =\n                      results.contests[contestId].candidates[candidateId]\n                    return (\n                      <Candidate>\n                        <CandidateDataColumn>\n                          <CandidateMain as=\"h3\">{name}</CandidateMain>\n                          <CandidateDetail>{getPartyById(partyId)?.name}</CandidateDetail>\n                        </CandidateDataColumn>\n                        <CandidateDataColumn>\n                          <CandidateMain>\n                            {formatPercentage(candidateVotes, contestVotes)}\n                          </CandidateMain>\n                          <CandidateDetail>{candidateVotes} votes</CandidateDetail>\n                        </CandidateDataColumn>\n                      </Candidate>\n                    )\n                  })}\n                </div>\n              </Contest>\n            )\n          }\n        )}\n      </Contests>\n    </Container>\n    <Container>\n      <Refresh>This page will refresh in 5 minutes.</Refresh>\n    </Container>\n  </div>\n)\n\nexport default App\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}